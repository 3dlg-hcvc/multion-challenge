# @package _global_
defaults:
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /lmon_benchmark: langmon_nav
  - _self_
habitat:
  environment:
    #max_episode_steps: 150 # temporary for debugging
    iterator_options:
      max_scene_repeat_steps: 50000
  task:
    type: MultiObjectNav-v1
    reward_measure: distance_to_currgoal_reward
    success_reward: 2.5
    slack_reward: -1e-3
    actions:
      #stop:
       # type: StopAction
      stop:
        type: FoundObjectAction
      move_forward:
        type: MoveForwardAction
      turn_left:
        type: TurnLeftAction
        tilt_angle: 15
      turn_right:
        type: TurnRightAction
        tilt_angle: 15
    lab_sensors:
      multiobjectgoal_sensor:
        type: MultiObjectGoalSensor
        goal_spec: CATEGORY_LABEL_TEXT
        goal_spec_max_val: 500
    measurements:
      distance_to_currgoal:
        distance_to: VIEW_POINTS
      sub_success:
        success_distance: 0.5
  simulator:
    agents:
      main_agent:
        articulated_agent_urdf: 'null'
        articulated_agent_type: 'null'
        ik_arm_urdf: 'null'
        radius: 0.1
  dataset:
    type: MultiObjectNav-v1
    split: minival
    scenes_dir: data/scene_datasets/fphab/scenes
    data_path: data/datasets/{split}/{split}.json.gz
mopa:
  sem_map_policy:
      model: vlmaps
      use_oracle_map: False
      map_size: 50
      map_channels: 4
      coordinate_min: -62.3241
      coordinate_max: 90.0399
      #meters_per_pixel: 0.3
      object_padding: 0
      object_ind_offset: 1
      use_local_map: False
      use_world_loc: True
      map_resolution: 0.2
      meters_covered: 50
      EXPLORATION_STRATEGY: "random"  # can be one of ["random", "stubborn"]
      EXPLORE_RADIUS: 50
      MAX_STEPS_BEFORE_GOAL_SELECTION: 50
      global_map_size: 250
      USE_LOCAL_MAP_FOR_STUBBORN: True
      local_map_size: 15
      collision_threshold: 5
      has_rgb: True
      frontier_nearest_select: True
      frontier_nearest_select_dist: 15
      frontier_dilation_size: 10
      #added
      grid_stop_distance_flag: True
      grid_stop_distance: 0.5
task_baselines:
  eval_non_learning: False #True
  results_dir: "experiments/mopa/orasem/minival/results"
habitat_baselines:
  torch_gpu_id: 0
  tensorboard_dir: "experiments/mopa/orasem/minival/tb"
  video_dir: "experiments/mopa/orasem/minival/results/pnp_corrected_fol_sampling_w_gsem"
  test_episode_count: -1
  eval_ckpt_path_dir: "retrained/ckpt.55.pth" #"data/pretrained/hm3d_ddppo_pointnav_baselines_v1/hm3d-depth/ckpt.60.pth" #"retrained/ckpt.55.pth"
  num_environments: 1
  checkpoint_folder: "experiments/mopa/orasem/minival/" #checkpoints"
  num_updates: 270000
  log_interval: 10
  num_checkpoints: 200
  trainer_name: "semmaponvlmaps" #follow
  # True
  # sensors: ["DEPTH_SENSOR", "RGB_SENSOR", "SEMANTIC_SENSOR"]
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  eval:
    split: "minival" #"minival"
    use_ckpt_config: False
    video_option: []
  
  rl:

    policy:
      name: "PointNavResNetPolicy"
      obs_transforms:
        resize_shortest_edge:
          type: ResizeShortestEdge
          size: 256
          channels_last: true
          trans_keys:
            - rgb
            - depth
            - semantic
          semantic_key: semantic
        center_cropper:
          type: CenterCropper
          height: 256
          width: 256
          channels_last: true
          trans_keys:
            - rgb
            - depth
            - semantic

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 4
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 64
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether or not the visual encoder backbone will be trained.
      train_encoder: True
      # Whether or not to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet50
      rnn_type: LSTM
      num_recurrent_layers: 2
